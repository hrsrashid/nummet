module BivarInterpolNewtonSpec where

import qualified BivarInterpolNewton
import qualified Data.Matrix         as Mx
import           Test.Hspec


suite :: SpecWith ()
suite = describe "Newton bivariate polynomial interpolation" $ do
  let compute = Mx.toLists . BivarInterpolNewton.compute . Mx.fromLists

  it "approx correctly" $
    compute
    [ [0, 1, 2,  3]
    , [2, 5, 6, 10]
    , [4, 8, 9, 11]
    , [6, 3, 4,  7]
    ] `shouldBe`
    [ [5.0,4.97875,4.965,4.95875,4.96,4.96875,4.985,5.00875,5.04,5.07875]
    , [5.125,5.17875,5.24,5.30875,5.385,5.46875,5.56,5.65875,5.765,5.87875]
    , [5.66,5.63875,5.625,5.61875,5.62,5.62875,5.645,5.66875,5.7,5.73875]
    , [5.785,5.83875,5.9,5.96875,6.045,6.12875,6.22,6.31875,6.425,6.53875]
    , [6.24,6.21875,6.205,6.19875,6.2,6.20875,6.225,6.24875,6.28,6.31875]
    , [6.365,6.41875,6.48,6.54875,6.625,6.70875,6.8,6.89875,7.005,7.11875]
    , [6.74,6.71875,6.705,6.69875,6.7,6.70875,6.725,6.74875,6.78,6.81875]
    , [6.865,6.91875,6.98,7.04875,7.125,7.20875,7.3,7.39875,7.505,7.61875]
    , [7.16,7.13875,7.125,7.11875,7.12,7.12875,7.145,7.16875,7.2,7.23875]
    , [7.285,7.33875,7.4,7.46875,7.545,7.62875,7.72,7.81875,7.925,8.03875]
    , [7.5,7.47875,7.465,7.45875,7.46,7.46875,7.485,7.50875,7.54,7.57875]
    , [7.625,7.67875,7.74,7.80875,7.885,7.96875,8.06,8.15875,8.265,8.37875]
    , [7.76,7.73875,7.725,7.71875,7.72,7.72875,7.745,7.76875,7.8,7.83875]
    , [7.885,7.93875,8.0,8.06875,8.145,8.22875,8.32,8.41875,8.525,8.63875]
    , [7.94,7.91875,7.905,7.89875,7.9,7.90875,7.925,7.94875,7.98,8.01875]
    , [8.065,8.11875,8.18,8.24875,8.325,8.40875,8.5,8.59875,8.705,8.81875]
    , [8.04,8.01875,8.005,7.99875,8.0,8.00875,8.025,8.04875,8.08,8.11875]
    , [8.165,8.21875,8.28,8.34875,8.425,8.50875,8.6,8.69875,8.805,8.91875]
    , [8.06,8.03875,8.025,8.01875,8.02,8.02875,8.045,8.06875,8.1,8.13875]
    , [8.185,8.23875,8.3,8.36875,8.445,8.52875,8.62,8.71875,8.825,8.93875]
    ]
